name: Build Custom VCAM v2

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

env:
  THEOS: /opt/theos

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        submodules: true
    
    - name: Setup Build Environment
      timeout-minutes: 10
      run: |
        echo "=== Setting up build environment ==="
        sudo apt-get update -y
        sudo apt-get install -y build-essential make git curl wget unzip fakeroot file
        echo "✅ Basic dependencies installed"
        
        # Verify critical build tools
        echo "=== Verifying build tools ==="
        which make && echo "✅ make: $(make --version | head -1)"
        which gcc && echo "✅ gcc: $(gcc --version | head -1)" 
        which file && echo "✅ file: $(file --version | head -1)"
        which curl && echo "✅ curl: $(curl --version | head -1)"
        
    - name: Install ldid with Fallback
      timeout-minutes: 5
      run: |
        echo "=== Installing ldid ==="
        
        # Try MOZGIII action first (pinned to stable version)
        if curl -sSL https://raw.githubusercontent.com/MOZGIII/install-ldid-action/master/install.sh | bash -s -- v2.1.5-procursus2; then
          echo "✅ ldid installed via MOZGIII action"
        else
          echo "❌ MOZGIII action failed, trying manual installation"
          
          # Fallback: Manual installation from ProcursusTeam/ldid
          echo "=== Attempting manual ldid installation ==="
          LDID_VERSION="v2.1.5-procursus2"
          LDID_URL="https://github.com/ProcursusTeam/ldid/releases/download/${LDID_VERSION}/ldid_linux_x86_64"
          
          if curl -L --max-time 60 --connect-timeout 10 -o /tmp/ldid "$LDID_URL"; then
            if file /tmp/ldid | grep -q "ELF.*executable"; then
              sudo mv /tmp/ldid /usr/local/bin/ldid
              sudo chmod +x /usr/local/bin/ldid
              echo "✅ ldid installed manually from ProcursusTeam releases"
            else
              echo "❌ Downloaded ldid is not a valid executable"
              exit 1
            fi
          else
            echo "❌ Failed to download ldid from ProcursusTeam releases"
            exit 1
          fi
        fi
        
        # Verify ldid installation
        if command -v ldid >/dev/null 2>&1; then
          echo "✅ ldid installation verified at: $(which ldid)"
          echo "ldid version info:"
          ldid 2>&1 | head -3 || echo "Version info not available"
        else
          echo "❌ ldid installation failed completely"
          exit 1
        fi
        
    - name: Install Theos with Official Installer
      timeout-minutes: 15
      run: |
        echo "=== Installing Theos using Official Installer ==="
        echo "Repository: $GITHUB_REPOSITORY | Runner: $RUNNER_OS $RUNNER_ARCH"
        
        # Use the official Theos installer which handles toolchain automatically
        if bash -c "$(curl -fsSL https://raw.githubusercontent.com/theos/theos/master/bin/install-theos)"; then
          echo "✅ Theos installed successfully via official installer"
          
          # Verify installation
          if [ -d "$THEOS" ] && [ -f "$THEOS/makefiles/common.mk" ]; then
            echo "✅ Theos installation verified"
            echo "Theos version: $(cat $THEOS/bin/theos-version 2>/dev/null || echo 'Version file not found')"
          else
            echo "❌ Theos installation verification failed"
            ls -la $THEOS/ 2>/dev/null || echo "THEOS directory not found"
            exit 1
          fi
        else
          echo "❌ Official Theos installer failed, trying manual installation"
          
          # Fallback to manual installation if official installer fails
          echo "=== Fallback: Manual Theos Installation ==="
          sudo git clone --recursive https://github.com/theos/theos.git $THEOS
          sudo chown -R $USER:$USER $THEOS
          
          # Manual toolchain installation with multiple sources
          echo "=== Installing iOS Linux Toolchain ==="
          mkdir -p $THEOS/toolchain
          
          # Function to try downloading and validating toolchain
          try_download() {
            local url="$1"
            local description="$2"
            echo "Trying $description: $url"
            
            if curl --max-time 300 --connect-timeout 30 --retry 3 -fsSL "$url" -o toolchain.tar.gz; then
              if file toolchain.tar.gz | grep -q "gzip compressed"; then
                echo "✅ Valid toolchain downloaded from $description"
                return 0
              else
                echo "❌ Invalid file format from $description"
                file toolchain.tar.gz
              fi
            else
              echo "❌ Download failed from $description"
            fi
            rm -f toolchain.tar.gz
            return 1
          }
          
          # Try multiple sources with updated URLs
          if try_download "https://github.com/kabiroberai/toolchain/releases/download/20210228/ios-linux.tar.gz" "GitHub kabiroberai toolchain"; then
            echo "Primary GitHub source successful"
          elif try_download "https://github.com/tpoechtrager/cctools-port/releases/download/973.0.1/ios-toolchain-973.0.1-linux-x86_64.tar.xz" "cctools-port latest"; then
            echo "cctools-port source successful"
            # Handle .tar.xz format
            mv toolchain.tar.gz toolchain.tar.xz
            if tar xJf toolchain.tar.xz -C $THEOS/toolchain 2>/dev/null; then
              rm toolchain.tar.xz
              echo "✅ XZ Toolchain extraction complete"
            else
              echo "❌ XZ Toolchain extraction failed"
              exit 1
            fi
          elif try_download "https://developer.angelxwind.net/Linux/ios-toolchain_clang%2bllvm%2bld64_latest_linux_x86_64.zip" "angelxwind mirror"; then
            echo "angelxwind mirror successful"
            # Handle zip format
            mv toolchain.tar.gz toolchain.zip
            if unzip -q toolchain.zip -d $THEOS/toolchain; then
              rm toolchain.zip
              echo "✅ ZIP Toolchain extraction complete"
            else
              echo "❌ ZIP Toolchain extraction failed"
              exit 1
            fi
          else
            echo "❌ All toolchain sources failed for $GITHUB_REPOSITORY"
            echo "Debug info: THEOS=$THEOS, Available space: $(df -h . | tail -1)"
            
            # Try building minimal toolchain from system tools
            echo "=== Attempting system toolchain setup ==="
            mkdir -p $THEOS/toolchain/linux/iphone/bin
            # Create symbolic links to system tools as last resort
            for tool in clang clang++; do
              if which $tool >/dev/null 2>&1; then
                ln -sf $(which $tool) $THEOS/toolchain/linux/iphone/bin/
                echo "Created symlink for $tool"
              fi
            done
            
            if [ ! -f "$THEOS/toolchain/linux/iphone/bin/clang" ]; then
              echo "❌ Could not set up any working toolchain"
              exit 1
            fi
            echo "✅ System toolchain setup complete"
          fi
          
          # Extract standard gzip toolchain if we have it
          if [ -f "toolchain.tar.gz" ]; then
            if tar xzf toolchain.tar.gz -C $THEOS/toolchain 2>/dev/null; then
              rm toolchain.tar.gz
              echo "✅ Standard toolchain extraction complete"
            else
              echo "❌ Standard toolchain extraction failed"
              echo "Archive contents:" 
              tar -tzf toolchain.tar.gz 2>/dev/null | head -10 || echo "Cannot list archive"
              exit 1
            fi
          fi
        fi
        
    - name: Download iOS 13.7 SDK
      timeout-minutes: 5
      run: |
        if [ ! -d "$THEOS/sdks/iPhoneOS13.7.sdk" ]; then
          echo "=== Downloading iOS 13.7 SDK ==="
          echo "Target SDK: iPhoneOS13.7.sdk for $GITHUB_REPOSITORY"
          
          # Try official theos/sdks first
          if curl --max-time 180 --connect-timeout 30 -LO https://github.com/theos/sdks/archive/master.zip; then
            if file master.zip | grep -q "Zip archive"; then
              echo "✅ Valid SDK archive downloaded from theos/sdks"
              if unzip -q master.zip && [ -d "sdks-master/iPhoneOS13.7.sdk" ]; then
                cp -r sdks-master/iPhoneOS13.7.sdk $THEOS/sdks/
                rm -rf master.zip sdks-master
                echo "✅ iOS 13.7 SDK installed successfully"
              else
                echo "❌ SDK extraction failed, checking available SDKs"
                ls -la sdks-master/ 2>/dev/null || echo "sdks-master directory not found"
                
                # Try to find any iOS 13.x SDK as fallback
                for sdk in sdks-master/iPhoneOS13.*.sdk; do
                  if [ -d "$sdk" ]; then
                    echo "Found alternative SDK: $(basename $sdk)"
                    cp -r "$sdk" $THEOS/sdks/iPhoneOS13.7.sdk
                    rm -rf master.zip sdks-master
                    echo "✅ Alternative iOS SDK installed successfully"
                    break
                  fi
                done
                
                if [ ! -d "$THEOS/sdks/iPhoneOS13.7.sdk" ]; then
                  echo "❌ No suitable iOS 13.x SDK found"
                  exit 1
                fi
              fi
            else
              echo "❌ Downloaded file is not a valid zip archive"
              exit 1
            fi
          else
            echo "❌ Failed to download SDK from GitHub theos/sdks"
            
            # Fallback to alternative SDK source
            echo "=== Trying alternative SDK source ==="
            if curl --max-time 180 --connect-timeout 30 -LO https://github.com/xybp888/iOS-SDKs/archive/master.zip; then
              echo "Trying xybp888/iOS-SDKs as fallback"
              if unzip -q master.zip; then
                # Look for iOS 13.x SDK
                find iOS-SDKs-master -name "iPhoneOS13*.sdk" -type d | head -1 | while read sdk; do
                  if [ -n "$sdk" ]; then
                    cp -r "$sdk" $THEOS/sdks/iPhoneOS13.7.sdk
                    echo "✅ Alternative SDK source successful"
                  fi
                done
                rm -rf master.zip iOS-SDKs-master
              fi
            fi
            
            if [ ! -d "$THEOS/sdks/iPhoneOS13.7.sdk" ]; then
              echo "❌ All SDK sources failed"
              exit 1
            fi
          fi
        else
          echo "✅ iOS 13.7 SDK already present"
        fi
        
    - name: Validate Build Environment
      timeout-minutes: 3
      run: |
        echo "=== Environment Validation ==="
        echo "Repository: $GITHUB_REPOSITORY"
        echo "Workflow: $GITHUB_WORKFLOW | Run: $GITHUB_RUN_ID"
        echo "Runner: $RUNNER_OS $RUNNER_ARCH ($RUNNER_ENVIRONMENT)"
        echo "THEOS: $THEOS"
        echo "PATH: $PATH"
        
        # Function for validation with detailed reporting
        validate_component() {
          local component="$1"
          local path="$2"
          local test_cmd="$3"
          
          echo "=== $component Validation ==="
          if [ -e "$path" ]; then
            echo "✅ $component exists at: $path"
            if [ -n "$test_cmd" ]; then
              if eval "$test_cmd" >/dev/null 2>&1; then
                echo "✅ $component functional test passed"
              else
                echo "❌ $component functional test failed"
                return 1
              fi
            fi
          else
            echo "❌ $component not found at: $path"
            return 1
          fi
        }
        
        # Validate all components
        VALIDATION_FAILED=0
        
        validate_component "Theos Framework" "$THEOS" "" || VALIDATION_FAILED=1
        
        # Check for toolchain in multiple possible locations
        CLANG_PATH=""
        for possible_clang in \
          "$THEOS/toolchain/linux/iphone/bin/clang" \
          "$THEOS/toolchain/bin/clang" \
          "$(which clang)"; do
          if [ -f "$possible_clang" ]; then
            CLANG_PATH="$possible_clang"
            break
          fi
        done
        
        if [ -n "$CLANG_PATH" ]; then
          validate_component "Clang Compiler" "$CLANG_PATH" "$CLANG_PATH --version" || VALIDATION_FAILED=1
        else
          echo "❌ No clang compiler found in any expected location"
          VALIDATION_FAILED=1
        fi
        
        validate_component "iOS 13.7 SDK" "$THEOS/sdks/iPhoneOS13.7.sdk" "" || VALIDATION_FAILED=1
        
        # Special ldid validation with detailed debugging
        echo "=== ldid Validation ==="
        LDID_PATH="$(which ldid)"
        if [ -f "$LDID_PATH" ]; then
          echo "✅ ldid exists at: $LDID_PATH"
          echo "ldid file info: $(file "$LDID_PATH")"
          echo "ldid permissions: $(ls -la "$LDID_PATH")"
          
          # Test ldid functionality (ldid without args should show usage)
          if ldid >/dev/null 2>&1; then
            echo "✅ ldid functional test passed"
          else
            echo "❌ ldid functional test failed"
            echo "ldid error output:"
            ldid 2>&1 | head -5 || echo "No error output available"
            VALIDATION_FAILED=1
          fi
        else
          echo "❌ ldid not found at: $LDID_PATH"
          VALIDATION_FAILED=1
        fi
        
        validate_component "fakeroot" "$(which fakeroot)" "fakeroot --version" || VALIDATION_FAILED=1
        
        if [ $VALIDATION_FAILED -eq 1 ]; then
          echo "❌ Build environment validation failed for $GITHUB_REPOSITORY"
          echo "=== Extended Debug Information ==="
          echo "Working directory: $(pwd)"
          echo "Theos contents: $(ls -la $THEOS/ 2>/dev/null | wc -l) items"
          echo "Toolchain contents: $(find $THEOS/toolchain -type f 2>/dev/null | wc -l) files"
          echo "SDK contents: $(ls -la $THEOS/sdks/ 2>/dev/null | wc -l) items"
          echo "Available binaries in PATH:"
          echo "  - clang: $(which clang || echo 'not found')"
          echo "  - ldid: $(which ldid || echo 'not found')" 
          echo "  - fakeroot: $(which fakeroot || echo 'not found')"
          echo "Current PATH: $PATH"
          echo "Theos bin directory contents:"
          ls -la $THEOS/bin/ 2>/dev/null || echo "Theos bin directory not found"
          exit 1
        else
          echo "✅ All build environment validation passed for $GITHUB_REPOSITORY"
          echo "=== Build Environment Summary ==="
          echo "  - Theos: $THEOS"
          echo "  - Clang: $(which clang || echo $CLANG_PATH)"
          echo "  - ldid: $(which ldid)"
          echo "  - SDK: $THEOS/sdks/iPhoneOS13.7.sdk"
          echo "  - Ready for build!"
        fi
        
    - name: Build Project
      timeout-minutes: 15
      env:
        THEOS: ${{ env.THEOS }}
      run: |
        # Preserve original PATH and add Theos bin directory
        export PATH="$THEOS/bin:$PATH"
        
        echo "=== Starting Build for $GITHUB_REPOSITORY ==="
        echo "Build environment: $RUNNER_OS on $RUNNER_ARCH"
        echo "Workflow: $GITHUB_WORKFLOW | Run ID: $GITHUB_RUN_ID"
        echo "Working directory: $(pwd)"
        echo "Makefile exists: $([ -f Makefile ] && echo 'Yes' || echo 'No')"
        
        # Verify build tools are available
        echo "=== Build Tools Verification ==="
        echo "make: $(which make || echo 'NOT FOUND')"
        echo "THEOS: $THEOS"
        echo "PATH: $PATH"
        echo "Theos make available: $([ -f $THEOS/bin/make ] && echo 'Yes' || echo 'No')"
        
        # Source Theos environment if available
        if [ -f "$THEOS/bin/theos" ]; then
          echo "✅ Sourcing Theos environment"
          source "$THEOS/bin/theos"
        fi
        
        if make clean; then
          echo "✅ Clean step completed successfully"
        else
          echo "❌ Clean step failed"
          echo "Available commands: $(which make gcc clang ld || echo 'build tools missing')"
          exit 1
        fi
        
        echo "=== Building with FINALPACKAGE=1 ==="
        if make package FINALPACKAGE=1; then
          echo "✅ Build completed successfully for $GITHUB_REPOSITORY"
          
          # Check for generated .deb file
          if ls *.deb >/dev/null 2>&1 || ls packages/*.deb >/dev/null 2>&1; then
            echo "✅ .deb package generated successfully"
            ls -la *.deb packages/*.deb 2>/dev/null || true
          else
            echo "❌ No .deb package found after build"
            echo "Contents of current directory:"
            ls -la
            echo "Contents of packages directory:"
            ls -la packages/ 2>/dev/null || echo "packages/ directory not found"
          fi
        else
          echo "❌ Build failed for $GITHUB_REPOSITORY"
          echo "=== Build Error Debug Information ==="
          echo "Last few lines of potential log files:"
          find . -name "*.log" -exec tail -5 {} \; 2>/dev/null || echo "No log files found"
          exit 1
        fi
        
    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: CustomVCAM-${{ github.sha }}
        path: |
          packages/*.deb
          *.deb
        retention-days: 30
        
    - name: Create Release Assets
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
      run: |
        mkdir -p release
        cp *.deb release/ 2>/dev/null || cp packages/*.deb release/ 2>/dev/null || echo "No .deb files found"
        ls -la release/
        
    - name: Generate Build Info
      run: |
        echo "## Build Information" > BUILD_INFO.md
        echo "- **Commit**: ${{ github.sha }}" >> BUILD_INFO.md
        echo "- **Branch**: ${{ github.ref_name }}" >> BUILD_INFO.md
        echo "- **Build Date**: $(date -u)" >> BUILD_INFO.md
        echo "- **Target Device**: iPhone 7 iOS 13.3.1 A1778" >> BUILD_INFO.md
        echo "- **Jailbreak**: checkra1n compatible" >> BUILD_INFO.md
        echo "" >> BUILD_INFO.md
        echo "## Installation" >> BUILD_INFO.md
        echo "1. Download the .deb file" >> BUILD_INFO.md
        echo "2. Transfer to your jailbroken device" >> BUILD_INFO.md
        echo "3. Install using Filza or dpkg" >> BUILD_INFO.md
        echo "4. Respring device" >> BUILD_INFO.md
        echo "5. Double-tap volume buttons to activate" >> BUILD_INFO.md
        
    - name: Upload Release Info
      uses: actions/upload-artifact@v4
      with:
        name: build-info-${{ github.sha }}
        path: BUILD_INFO.md 