name: Build Custom VCAM v2

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

env:
  THEOS: /opt/theos

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        submodules: true
    
    - name: Cache Theos Installation
      uses: actions/cache@v4
      with:
        path: |
          /opt/theos
        key: theos-${{ runner.os }}-v3-${{ hashFiles('Makefile') }}
        restore-keys: |
          theos-${{ runner.os }}-v3-
          theos-${{ runner.os }}-
    
    - name: Install System Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential git curl wget unzip fakeroot
        
    - name: Install ldid
      uses: MOZGIII/install-ldid-action@v1
      with:
        tag: v2.1.5-procursus2
        
    - name: Install Theos
      run: |
        if [ ! -d "$THEOS" ]; then
          sudo git clone --recursive https://github.com/theos/theos.git $THEOS
          sudo chown -R $USER:$USER $THEOS
        fi
        
    - name: Download iOS Linux Toolchain
      run: |
        if [ ! -f "$THEOS/toolchain/linux/iphone/bin/clang" ]; then
          echo "=== Downloading iOS Linux Toolchain ==="
          
          # Try primary source with validation
          echo "Trying primary source: kabiroberai.com..."
          curl -L https://kabiroberai.com/toolchain/download.php?toolchain=ios-linux -o toolchain.tar.gz
          
          # Validate downloaded file
          if file toolchain.tar.gz | grep -q "gzip compressed"; then
            echo "✅ Valid gzip file downloaded from primary source"
          else
            echo "❌ Invalid file from primary source, trying alternative..."
            rm -f toolchain.tar.gz
            
            # Fallback: Try GitHub releases
            echo "Trying GitHub releases..."
            LATEST_RELEASE=$(curl -s https://api.github.com/repos/kabiroberai/toolchain/releases/latest | grep "browser_download_url.*ios-linux" | cut -d '"' -f 4)
            if [ -n "$LATEST_RELEASE" ]; then
              curl -L "$LATEST_RELEASE" -o toolchain.tar.gz
            else
              # Fallback: Try specific known working URL
              echo "Trying known working URL..."
              curl -L "https://github.com/kabiroberai/toolchain/releases/download/v1.0/ios-linux.tar.gz" -o toolchain.tar.gz
            fi
            
            # Validate fallback download
            if ! file toolchain.tar.gz | grep -q "gzip compressed"; then
              echo "❌ All toolchain sources failed"
              exit 1
            fi
          fi
          
          # Extract toolchain
          echo "=== Extracting toolchain ==="
          tar xzf toolchain.tar.gz -C $THEOS/toolchain
          rm toolchain.tar.gz
          echo "✅ Toolchain extraction complete"
        else
          echo "✅ Toolchain already present"
        fi
        
    - name: Download iOS 13.7 SDK
      run: |
        if [ ! -d "$THEOS/sdks/iPhoneOS13.7.sdk" ]; then
          curl -LO https://github.com/theos/sdks/archive/master.zip
          unzip master.zip
          cp -r sdks-master/iPhoneOS13.7.sdk $THEOS/sdks/
          rm -rf master.zip sdks-master
        fi
        
    - name: Validate Build Environment
      run: |
        echo "=== Environment Validation ==="
        echo "THEOS: $THEOS"
        echo "PATH: $PATH"
        
        echo "=== Theos Installation ==="
        ls -la $THEOS/ || echo "❌ Theos directory not found"
        
        echo "=== Toolchain Validation ==="
        if [ -d "$THEOS/toolchain/linux/iphone/bin/" ]; then
          echo "✅ Toolchain directory exists"
          ls -la $THEOS/toolchain/linux/iphone/bin/ | head -5
          if [ -f "$THEOS/toolchain/linux/iphone/bin/clang" ]; then
            echo "✅ Clang binary exists"
            $THEOS/toolchain/linux/iphone/bin/clang --version && echo "✅ Clang working" || echo "❌ Clang not working"
          else
            echo "❌ Clang binary not found"
          fi
        else
          echo "❌ Toolchain directory not found"
        fi
        
        echo "=== SDK Validation ==="
        ls -la $THEOS/sdks/ || echo "❌ SDKs directory not found"
        ls -la $THEOS/sdks/iPhoneOS13.7.sdk/ || echo "❌ iOS 13.7 SDK not found"
        
        echo "=== Dependencies Validation ==="
        which ldid || echo "❌ ldid not found"
        ldid --help >/dev/null 2>&1 && echo "✅ ldid working" || echo "❌ ldid not working"
        which fakeroot || echo "❌ fakeroot not found"
        
        echo "=== Validation Complete ==="
        
    - name: Build Project
      env:
        PATH: ${{ env.THEOS }}/bin:${{ env.PATH }}
      run: |
        echo "=== Starting Build ==="
        make clean
        make package FINALPACKAGE=1
        echo "=== Build Complete ==="
        
    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: CustomVCAM-${{ github.sha }}
        path: |
          packages/*.deb
          *.deb
        retention-days: 30
        
    - name: Create Release Assets
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
      run: |
        mkdir -p release
        cp *.deb release/ 2>/dev/null || cp packages/*.deb release/ 2>/dev/null || echo "No .deb files found"
        ls -la release/
        
    - name: Generate Build Info
      run: |
        echo "## Build Information" > BUILD_INFO.md
        echo "- **Commit**: ${{ github.sha }}" >> BUILD_INFO.md
        echo "- **Branch**: ${{ github.ref_name }}" >> BUILD_INFO.md
        echo "- **Build Date**: $(date -u)" >> BUILD_INFO.md
        echo "- **Target Device**: iPhone 7 iOS 13.3.1 A1778" >> BUILD_INFO.md
        echo "- **Jailbreak**: checkra1n compatible" >> BUILD_INFO.md
        echo "" >> BUILD_INFO.md
        echo "## Installation" >> BUILD_INFO.md
        echo "1. Download the .deb file" >> BUILD_INFO.md
        echo "2. Transfer to your jailbroken device" >> BUILD_INFO.md
        echo "3. Install using Filza or dpkg" >> BUILD_INFO.md
        echo "4. Respring device" >> BUILD_INFO.md
        echo "5. Double-tap volume buttons to activate" >> BUILD_INFO.md
        
    - name: Upload Release Info
      uses: actions/upload-artifact@v4
      with:
        name: build-info-${{ github.sha }}
        path: BUILD_INFO.md 