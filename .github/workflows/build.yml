name: Build Custom VCAM v2

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

env:
  THEOS: /opt/theos

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        submodules: true
    
    - name: Cache Theos Installation
      uses: actions/cache@v4
      with:
        path: |
          /opt/theos
        key: theos-${{ runner.os }}-v3-${{ hashFiles('Makefile') }}
        restore-keys: |
          theos-${{ runner.os }}-v3-
          theos-${{ runner.os }}-
    
    - name: Install System Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential git curl wget unzip fakeroot
        
    - name: Install ldid
      uses: MOZGIII/install-ldid-action@v1
      with:
        tag: v2.1.5-procursus2
        
    - name: Install Theos
      run: |
        if [ ! -d "$THEOS" ]; then
          sudo git clone --recursive https://github.com/theos/theos.git $THEOS
          sudo chown -R $USER:$USER $THEOS
        fi
        
    - name: Download iOS Linux Toolchain
      timeout-minutes: 10
      run: |
        if [ ! -f "$THEOS/toolchain/linux/iphone/bin/clang" ]; then
          echo "=== Downloading iOS Linux Toolchain ==="
          echo "Repository: $GITHUB_REPOSITORY | Run ID: $GITHUB_RUN_ID"
          echo "Runner: $RUNNER_OS $RUNNER_ARCH | Environment: $RUNNER_ENVIRONMENT"
          
          # Function to try download with timeout and validation
          try_download() {
            local url="$1"
            local description="$2"
            echo "Trying $description: $url"
            
            if curl --max-time 300 --connect-timeout 30 -L "$url" -o toolchain.tar.gz 2>/dev/null; then
              if file toolchain.tar.gz 2>/dev/null | grep -q "gzip compressed"; then
                local file_size=$(stat -c%s toolchain.tar.gz 2>/dev/null || echo "0")
                if [ "$file_size" -gt 10000000 ]; then  # Must be at least 10MB
                  echo "✅ Valid toolchain downloaded from $description (${file_size} bytes)"
                  return 0
                else
                  echo "❌ File too small from $description (${file_size} bytes)"
                fi
              else
                echo "❌ Invalid file format from $description"
              fi
            else
              echo "❌ Download failed from $description"
            fi
            rm -f toolchain.tar.gz
            return 1
          }
          
          # Try multiple sources in sequence
          if try_download "https://kabiroberai.com/toolchain/download.php?toolchain=ios-linux" "kabiroberai.com"; then
            echo "Primary source successful"
          elif try_download "https://github.com/kabiroberai/toolchain/releases/download/20210228/ios-linux.tar.gz" "GitHub v20210228"; then
            echo "GitHub release successful"
          elif try_download "https://apt.procurs.us/pool/iphoneos-arm64/1600/theos-toolchain_2.1-1_iphoneos-arm.deb" "Procursus mirror"; then
            echo "Procursus mirror successful"
          else
            echo "❌ All toolchain sources failed for $GITHUB_REPOSITORY"
            echo "Debug info: PWD=$(pwd), THEOS=$THEOS"
            echo "Available space: $(df -h . | tail -1)"
            exit 1
          fi
          
          # Extract toolchain
          echo "=== Extracting toolchain ==="
          if tar xzf toolchain.tar.gz -C $THEOS/toolchain 2>/dev/null; then
            rm toolchain.tar.gz
            echo "✅ Toolchain extraction complete"
          else
            echo "❌ Toolchain extraction failed"
            echo "Archive contents:" 
            tar -tzf toolchain.tar.gz 2>/dev/null | head -10 || echo "Cannot list archive"
            exit 1
          fi
        else
          echo "✅ Toolchain already present"
        fi
        
    - name: Download iOS 13.7 SDK
      timeout-minutes: 5
      run: |
        if [ ! -d "$THEOS/sdks/iPhoneOS13.7.sdk" ]; then
          echo "=== Downloading iOS 13.7 SDK ==="
          echo "Target SDK: iPhoneOS13.7.sdk for $GITHUB_REPOSITORY"
          
          if curl --max-time 180 --connect-timeout 30 -LO https://github.com/theos/sdks/archive/master.zip; then
            if file master.zip | grep -q "Zip archive"; then
              echo "✅ Valid SDK archive downloaded"
              if unzip -q master.zip && [ -d "sdks-master/iPhoneOS13.7.sdk" ]; then
                cp -r sdks-master/iPhoneOS13.7.sdk $THEOS/sdks/
                rm -rf master.zip sdks-master
                echo "✅ iOS 13.7 SDK installed successfully"
              else
                echo "❌ SDK extraction failed or iPhoneOS13.7.sdk not found"
                ls -la sdks-master/ 2>/dev/null || echo "sdks-master directory not found"
                exit 1
              fi
            else
              echo "❌ Downloaded file is not a valid zip archive"
              exit 1
            fi
          else
            echo "❌ Failed to download SDK from GitHub"
            exit 1
          fi
        else
          echo "✅ iOS 13.7 SDK already present"
        fi
        
    - name: Validate Build Environment
      timeout-minutes: 3
      run: |
        echo "=== Environment Validation ==="
        echo "Repository: $GITHUB_REPOSITORY"
        echo "Workflow: $GITHUB_WORKFLOW | Run: $GITHUB_RUN_ID"
        echo "Runner: $RUNNER_OS $RUNNER_ARCH ($RUNNER_ENVIRONMENT)"
        echo "THEOS: $THEOS"
        echo "PATH: $PATH"
        
        # Function for validation with detailed reporting
        validate_component() {
          local component="$1"
          local path="$2"
          local test_cmd="$3"
          
          echo "=== $component Validation ==="
          if [ -e "$path" ]; then
            echo "✅ $component exists at: $path"
            if [ -n "$test_cmd" ]; then
              if eval "$test_cmd" >/dev/null 2>&1; then
                echo "✅ $component functional test passed"
              else
                echo "❌ $component functional test failed"
                return 1
              fi
            fi
          else
            echo "❌ $component not found at: $path"
            return 1
          fi
        }
        
        # Validate all components
        VALIDATION_FAILED=0
        
        validate_component "Theos Framework" "$THEOS" "" || VALIDATION_FAILED=1
        validate_component "Clang Compiler" "$THEOS/toolchain/linux/iphone/bin/clang" "$THEOS/toolchain/linux/iphone/bin/clang --version" || VALIDATION_FAILED=1
        validate_component "iOS 13.7 SDK" "$THEOS/sdks/iPhoneOS13.7.sdk" "" || VALIDATION_FAILED=1
        validate_component "ldid" "$(which ldid)" "ldid --help" || VALIDATION_FAILED=1
        validate_component "fakeroot" "$(which fakeroot)" "fakeroot --version" || VALIDATION_FAILED=1
        
        if [ $VALIDATION_FAILED -eq 1 ]; then
          echo "❌ Build environment validation failed for $GITHUB_REPOSITORY"
          echo "=== Debug Information ==="
          echo "Working directory: $(pwd)"
          echo "Available tools: $(ls -la $THEOS/toolchain/linux/iphone/bin/ 2>/dev/null | wc -l) files"
          echo "SDK contents: $(ls -la $THEOS/sdks/ 2>/dev/null | wc -l) items"
          exit 1
        else
          echo "✅ All build environment validation passed for $GITHUB_REPOSITORY"
        fi
        
    - name: Build Project
      timeout-minutes: 15
      env:
        PATH: ${{ env.THEOS }}/bin:${{ env.PATH }}
      run: |
        echo "=== Starting Build for $GITHUB_REPOSITORY ==="
        echo "Build environment: $RUNNER_OS on $RUNNER_ARCH"
        echo "Workflow: $GITHUB_WORKFLOW | Run ID: $GITHUB_RUN_ID"
        echo "Working directory: $(pwd)"
        echo "Makefile exists: $([ -f Makefile ] && echo 'Yes' || echo 'No')"
        
        if make clean; then
          echo "✅ Clean step completed successfully"
        else
          echo "❌ Clean step failed"
          exit 1
        fi
        
        echo "=== Building with FINALPACKAGE=1 ==="
        if make package FINALPACKAGE=1; then
          echo "✅ Build completed successfully for $GITHUB_REPOSITORY"
          
          # Check for generated .deb file
          if ls *.deb >/dev/null 2>&1 || ls packages/*.deb >/dev/null 2>&1; then
            echo "✅ .deb package generated successfully"
            ls -la *.deb packages/*.deb 2>/dev/null || true
          else
            echo "❌ No .deb package found after build"
            echo "Contents of current directory:"
            ls -la
            echo "Contents of packages directory:"
            ls -la packages/ 2>/dev/null || echo "packages/ directory not found"
          fi
        else
          echo "❌ Build failed for $GITHUB_REPOSITORY"
          echo "=== Build Error Debug Information ==="
          echo "Last few lines of potential log files:"
          find . -name "*.log" -exec tail -5 {} \; 2>/dev/null || echo "No log files found"
          exit 1
        fi
        
    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: CustomVCAM-${{ github.sha }}
        path: |
          packages/*.deb
          *.deb
        retention-days: 30
        
    - name: Create Release Assets
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
      run: |
        mkdir -p release
        cp *.deb release/ 2>/dev/null || cp packages/*.deb release/ 2>/dev/null || echo "No .deb files found"
        ls -la release/
        
    - name: Generate Build Info
      run: |
        echo "## Build Information" > BUILD_INFO.md
        echo "- **Commit**: ${{ github.sha }}" >> BUILD_INFO.md
        echo "- **Branch**: ${{ github.ref_name }}" >> BUILD_INFO.md
        echo "- **Build Date**: $(date -u)" >> BUILD_INFO.md
        echo "- **Target Device**: iPhone 7 iOS 13.3.1 A1778" >> BUILD_INFO.md
        echo "- **Jailbreak**: checkra1n compatible" >> BUILD_INFO.md
        echo "" >> BUILD_INFO.md
        echo "## Installation" >> BUILD_INFO.md
        echo "1. Download the .deb file" >> BUILD_INFO.md
        echo "2. Transfer to your jailbroken device" >> BUILD_INFO.md
        echo "3. Install using Filza or dpkg" >> BUILD_INFO.md
        echo "4. Respring device" >> BUILD_INFO.md
        echo "5. Double-tap volume buttons to activate" >> BUILD_INFO.md
        
    - name: Upload Release Info
      uses: actions/upload-artifact@v4
      with:
        name: build-info-${{ github.sha }}
        path: BUILD_INFO.md 