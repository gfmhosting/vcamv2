name: Build CustomVCAM Tweak

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Setup Theos
      run: |
        sudo apt-get update
        sudo apt-get install -y git make perl curl zip unzip python3
        
        # Install Theos
        sudo git clone --recursive https://github.com/theos/theos.git /opt/theos
        sudo chown -R $(whoami):$(whoami) /opt/theos
        echo "THEOS=/opt/theos" >> $GITHUB_ENV
        echo "/opt/theos/bin" >> $GITHUB_PATH
        
        # Setup iOS SDK with better error handling
        cd /opt/theos
        if [ ! -d "sdks" ]; then
          mkdir -p sdks
        fi
        curl -LO https://github.com/theos/sdks/archive/master.zip
        unzip -q master.zip
        cp -R sdks-master/* sdks/ 2>/dev/null || true
        rm -rf sdks-master master.zip
        
        # Ensure we have iOS 13.7 SDK or fallback
        if [ ! -d "sdks/iPhoneOS13.7.sdk" ] && [ -d "sdks" ]; then
          # Use latest available SDK
          ls -la sdks/
        fi
    
    - name: Install dependencies and setup toolchain
      run: |
        # Install required tools
        sudo apt-get install -y clang llvm build-essential libc6-dev
        
        # Create minimal iOS toolchain using system tools
        sudo mkdir -p /opt/theos/toolchain/linux/iphone/bin
        
                 # Create wrapper scripts for iOS cross-compilation
         cat > /tmp/clang-wrapper << 'EOF'
         #!/bin/bash
         SDK_PATH="/opt/theos/sdks"
         # Find available iOS SDK
         if [ -d "$SDK_PATH/iPhoneOS13.7.sdk" ]; then
             ISYSROOT="$SDK_PATH/iPhoneOS13.7.sdk"
         elif ls $SDK_PATH/iPhoneOS*.sdk 1> /dev/null 2>&1; then
             ISYSROOT=$(ls -d $SDK_PATH/iPhoneOS*.sdk | head -1)
         else
             ISYSROOT="$SDK_PATH"
         fi
         exec clang -target arm64-apple-ios13.0 -isysroot "$ISYSROOT" "$@"
         EOF
         
         cat > /tmp/clang++-wrapper << 'EOF'
         #!/bin/bash
         SDK_PATH="/opt/theos/sdks"
         # Find available iOS SDK
         if [ -d "$SDK_PATH/iPhoneOS13.7.sdk" ]; then
             ISYSROOT="$SDK_PATH/iPhoneOS13.7.sdk"
         elif ls $SDK_PATH/iPhoneOS*.sdk 1> /dev/null 2>&1; then
             ISYSROOT=$(ls -d $SDK_PATH/iPhoneOS*.sdk | head -1)
         else
             ISYSROOT="$SDK_PATH"
         fi
         exec clang++ -target arm64-apple-ios13.0 -isysroot "$ISYSROOT" "$@"
         EOF
        
                 # Install wrappers with both naming conventions  
         sudo mv /tmp/clang-wrapper /opt/theos/toolchain/linux/iphone/bin/arm-apple-darwin14-clang
         sudo mv /tmp/clang++-wrapper /opt/theos/toolchain/linux/iphone/bin/arm-apple-darwin14-clang++
         sudo chmod +x /opt/theos/toolchain/linux/iphone/bin/arm-apple-darwin14-clang*
         
         # Create additional symlinks for alternative naming
         sudo ln -sf /opt/theos/toolchain/linux/iphone/bin/arm-apple-darwin14-clang /opt/theos/toolchain/linux/iphone/bin/clang
         sudo ln -sf /opt/theos/toolchain/linux/iphone/bin/arm-apple-darwin14-clang++ /opt/theos/toolchain/linux/iphone/bin/clang++
         
         # Create symlinks for other tools
         sudo ln -sf /usr/bin/ar /opt/theos/toolchain/linux/iphone/bin/arm-apple-darwin14-ar
         sudo ln -sf /usr/bin/ar /opt/theos/toolchain/linux/iphone/bin/ar
         sudo ln -sf /usr/bin/strip /opt/theos/toolchain/linux/iphone/bin/arm-apple-darwin14-strip
         sudo ln -sf /usr/bin/strip /opt/theos/toolchain/linux/iphone/bin/strip
         sudo ln -sf /usr/bin/ranlib /opt/theos/toolchain/linux/iphone/bin/arm-apple-darwin14-ranlib
         sudo ln -sf /usr/bin/ranlib /opt/theos/toolchain/linux/iphone/bin/ranlib
         sudo ln -sf /usr/bin/ld /opt/theos/toolchain/linux/iphone/bin/arm-apple-darwin14-ld
         sudo ln -sf /usr/bin/ld /opt/theos/toolchain/linux/iphone/bin/ld
        
                 # Install ldid for code signing
         cd /tmp
         wget -q https://github.com/ProcursusTeam/ldid/releases/download/v2.1.5-procursus2/ldid_linux_x86_64
         sudo mv ldid_linux_x86_64 /opt/theos/bin/ldid
         sudo chmod +x /opt/theos/bin/ldid
         
         # Debug: Verify toolchain setup
         echo "=== Toolchain Verification ==="
         ls -la /opt/theos/toolchain/linux/iphone/bin/
         echo "Testing clang wrapper:"
         /opt/theos/toolchain/linux/iphone/bin/clang --version || echo "Clang wrapper failed"
         echo "Testing clang++ wrapper:"
         /opt/theos/toolchain/linux/iphone/bin/clang++ --version || echo "Clang++ wrapper failed"
    
    - name: Build tweak
      run: |
        export THEOS=/opt/theos
        export PATH="/opt/theos/bin:$PATH"
        export THEOS_DEVICE_IP=""
        export THEOS_DEVICE_PORT=""
        
        # Debug: Show environment
        echo "THEOS: $THEOS"
        echo "PATH: $PATH"
        ls -la /opt/theos/
        ls -la /opt/theos/bin/ || echo "No bin directory found"
        ls -la /opt/theos/toolchain/ || echo "No toolchain directory found"
        ls -la /opt/theos/sdks/ || echo "No sdks directory found"
        
        # Build with verbose output
        make clean
        make package FINALPACKAGE=1 THEOS_BUILD_DIR=.theos VERBOSE=1
    
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: CustomVCAM-deb
        path: packages/*.deb
    
    - name: Create Release
      if: github.ref == 'refs/heads/main'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ github.run_number }}
        name: CustomVCAM v${{ github.run_number }}
        files: packages/*.deb
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 