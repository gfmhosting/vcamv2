#import \"SimpleMediaManager.h\"\n\n@interface SimpleMediaManager () <UIImagePickerControllerDelegate, UINavigationControllerDelegate>\n@end\n\n@implementation SimpleMediaManager\n\n+ (instancetype)sharedInstance {\n    static SimpleMediaManager *instance = nil;\n    static dispatch_once_t onceToken;\n    dispatch_once(&onceToken, ^{\n        instance = [[SimpleMediaManager alloc] init];\n    });\n    return instance;\n}\n\n- (instancetype)init {\n    self = [super init];\n    if (self) {\n        _hasMedia = NO;\n    }\n    return self;\n}\n\n- (void)presentGallery {\n    UIImagePickerController *picker = [[UIImagePickerController alloc] init];\n    picker.sourceType = UIImagePickerControllerSourceTypePhotoLibrary;\n    picker.mediaTypes = @[@\"public.image\"];\n    picker.delegate = self;\n    \n    UIViewController *rootVC = [UIApplication sharedApplication].keyWindow.rootViewController;\n    [rootVC presentViewController:picker animated:YES completion:nil];\n}\n\n- (void)imagePickerController:(UIImagePickerController *)picker didFinishPickingMediaWithInfo:(NSDictionary<UIImagePickerControllerInfoKey, id> *)info {\n    self.selectedImage = info[UIImagePickerControllerOriginalImage];\n    self.hasMedia = (self.selectedImage != nil);\n    [picker dismissViewControllerAnimated:YES completion:nil];\n    NSLog(@\"[CustomVCAM] Media selected: %@\", self.hasMedia ? @\"YES\" : @\"NO\");\n}\n\n- (void)imagePickerControllerDidCancel:(UIImagePickerController *)picker {\n    [picker dismissViewControllerAnimated:YES completion:nil];\n}\n\n- (CMSampleBufferRef)createSampleBufferFromImage {\n    if (!self.selectedImage) return NULL;\n    \n    CVPixelBufferRef pixelBuffer = [self createPixelBufferFromImage:self.selectedImage];\n    if (!pixelBuffer) return NULL;\n    \n    CMSampleBufferRef sampleBuffer = NULL;\n    CMVideoFormatDescriptionRef formatDesc = NULL;\n    \n    CMVideoFormatDescriptionCreateForImageBuffer(kCFAllocatorDefault, pixelBuffer, &formatDesc);\n    \n    CMSampleTimingInfo timing = {CMTimeMake(1, 30), CMTimeMake(0, 30), kCMTimeInvalid};\n    CMSampleBufferCreateReadyWithImageBuffer(kCFAllocatorDefault, pixelBuffer, formatDesc, &timing, &sampleBuffer);\n    \n    if (formatDesc) CFRelease(formatDesc);\n    if (pixelBuffer) CVPixelBufferRelease(pixelBuffer);\n    \n    return sampleBuffer;\n}\n\n- (CVPixelBufferRef)createPixelBufferFromImage:(UIImage *)image {\n    if (!image) return NULL;\n    \n    CGSize size = CGSizeMake(1280, 720);\n    \n    CVPixelBufferRef pixelBuffer = NULL;\n    CVPixelBufferCreate(kCFAllocatorDefault, size.width, size.height, kCVPixelFormatType_32ARGB, NULL, &pixelBuffer);\n    \n    CVPixelBufferLockBaseAddress(pixelBuffer, 0);\n    void *data = CVPixelBufferGetBaseAddress(pixelBuffer);\n    \n    CGColorSpaceRef colorSpace = CGColorSpaceCreateDeviceRGB();\n    CGContextRef context = CGBitmapContextCreate(data, size.width, size.height, 8, CVPixelBufferGetBytesPerRow(pixelBuffer), colorSpace, kCGImageAlphaStoreFirst | kCGBitmapByteOrder32Host);\n    \n    CGContextDrawImage(context, CGRectMake(0, 0, size.width, size.height), image.CGImage);\n    \n    CGContextRelease(context);\n    CGColorSpaceRelease(colorSpace);\n    CVPixelBufferUnlockBaseAddress(pixelBuffer, 0);\n    \n    return pixelBuffer;\n}\n\n@end" 